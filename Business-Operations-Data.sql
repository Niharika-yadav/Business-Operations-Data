Show databases;
use new;
show tables;

# Sales Representative Performance

#Q1. Which sales reps are handling which accounts?

#select a.name as account_name from accounts as a;
#SELECT SR.name AS SALES_REP_NAME FROM sales_rep AS SR;
Select SR.name as sales_rep_name, a.name as account_name from sales_rep as SR join accounts as a on SR.id = a.sales_rep_id
 order by sales_rep_name, account_name;

/* Q2  One of the aspects that  the business wants to explore is what has been the 
share of each sales representative's s year on year sales out of the total yearly sales. 
The result of your query should look as given below
*/
WITH YearlySales AS (
    SELECT
        YEAR(occurred_at) AS Year,
        SALES_REP.NAME AS `Sales Rep Name`,
        SUM(TOTAL_AMT_USD) AS `Yearly Sales`
    FROM
        ORDERS
    JOIN
        SALES_REP ON ORDERS.ACCOUNT_ID = SALES_REP.ID
    GROUP BY
        Year, `Sales Rep Name`
),
TotalYearlySales AS (
    SELECT
        YEAR(occurred_at) AS Year,
        SUM(TOTAL_AMT_USD) AS `Total Yearly Sales`
    FROM
        ORDERS
    GROUP BY
        Year
)
SELECT
    YearlySales.Year AS Year,
    YearlySales.`Sales Rep Name`,
    (YearlySales.`Yearly Sales` / TotalYearlySales.`Total Yearly Sales`) * 100 AS `Sales Share (%)`
FROM
    YearlySales
JOIN
    TotalYearlySales ON YearlySales.Year = TotalYearlySales.Year
ORDER BY
    Year, `Sales Rep Name`;
    
#Revenue Analysis 
    
/*Q3  The business wants to understand which accounts contribute to the bulk of the revenue and 
the business also wants to see year on year trend on the revenue contribution of each account.*/

/*The final table should show revenue share of each account for each year's total revenue. 
As an example your final table should look like the one below*/ 
    
SELECT
    EXTRACT(YEAR FROM occurred_at) AS year,
    account_id,
    SUM(total_amt_usd) AS revenue_contribution,
    SUM(SUM(total_amt_usd)) OVER (PARTITION BY EXTRACT(YEAR FROM occurred_at)) AS total_revenue_year,
    SUM(total_amt_usd) / SUM(SUM(total_amt_usd)) OVER (PARTITION BY EXTRACT(YEAR FROM occurred_at)) AS revenue_share
FROM
    orders
GROUP BY
    EXTRACT(YEAR FROM occurred_at),
    account_id
ORDER BY
    year,
    revenue_share DESC; 
    
#Regional Analysis

/* Q4  Find the total revenue generated by accounts in each region.*/

Select r.name as "region", sum(o.total_amt_usd) as "total revenue"
from orders o
join accounts a on o.account_id = a.id
join sales_rep s on s.id= a.sales_rep_id
join region r on s.region_id= r.id
group by r.name;

#Q 5 Identify the top 5 accounts in terms of revenue in each region.
select r.name as region ,a.id as account_id, a.name as account_name, sum(o.total_amt_usd) as revenue
from orders o
join accounts a on o. account_id= a.id
join sales_rep s on s.id = a.sales_rep_id
join region r on s.region_id = r.id
group by r.name,a.id, a.name
order by r.name, revenue desc
limit 5;

#Web Events Analysis

# Q 6 Count the number of web events for each account.
select* from accounts;
select* from web_events;
Select  a.name as account_name, account_id, count(*) as web_event
from web_events w
join accounts a on a.id= w.account_id
group by account_id , account_name;

# Q 7 Determine the most common channel for web events.
select* from web_events;
select channel as common_channel, count(account_id) as event_count
from web_events
group by common_channel
limit 1;

#Order Analysis

# Q 7 Find the average order value for each account.
select* from orders; 
select* from accounts; 
select account_id, avg(total_amt_usd) as average_order
from orders 
group by account_id;

# Q 8 Determine the product mix (standard, gloss, poster) for each account.
select account_id,
	sum(standard_amt_usd),
    sum(gloss_amt_usd),
    sum(poster_amt_usd)
from orders
group by account_id;

#Geographical Analysis

#Q 9  Identify the geographical distribution of accounts based on latitude and longitude.

select a.lat, a.long , count(*) 
from accounts a
group by a.lat,a.long;

#Time-Based Analysis

# Q 11 Calculate the monthly revenue trend for the entire company.
select
	extract(year from occurred_at) as year,
    extract(month from occurred_at) as month,
    sum(total_amt_usd) as total_revenue
from 
	orders
group by 
    extract(year from occurred_at),
    extract(month from occurred_at)
order by year,month;

# Q 12 Find the peak revenue months for each account.
select account_id,extract(month from occurred_at) as month,extract(year from occurred_at) as year, sum(total_amt_usd) as monthly_revenue
from orders
group by account_id,month,year
order by account_id,monthly_revenue;

# Cross-Table Analysis

# Q 13 Join the accounts and orders tables to list the top 10 accounts by total revenue.
select* from orders;
select* from accounts;
select a.name as account_name, sum(total_amt_usd)as total_revenue
from orders o
join accounts a on a.id= o.account_id
group by account_name
order by total_revenue desc  limit 10;

# Q 14 Join the accounts and web_events tables to find the most active accounts in terms of web events.

select* from web_events;
select* from accounts;
select a.name as active_account_name, count(occurred_at) as web_event_count
from web_events w
join accounts a on w.account_id= a.id
group by active_account_name order by web_event_count desc;

